#!/usr/bin/env bash

function usage {
    {
        echo "'benchmark' called incorrectly. Usage:"
        echo ""
        echo "CMD=foo GEN_INPUT=bar INFO=baz REPS=n benchmark"
        echo ""
        echo "The GEN_INPUT parameter is a command for generating samples."
        echo "In this example, a loop will run 'bar baz 1', 'bar baz 2', ...,"
        echo "up to 'bar baz n'. The stdout of each are the samples."
        echo "For each sample, we time the execution of whatever's in the CMD"
        echo "parameter, sending the sample into its stdin."
        echo "The time, stdin, stdout and any failures are collected for each"
        echo "sample and the results are returned in JSON format."
        echo ""
        echo "To run CMD (but not GEN_INPUT) inside a particular Nix"
        echo "environment, you can supply a Nix expression as NIXENV. This is"
        echo "an easy way to prevent setup costs from being benchmarked."
        echo ""
        echo "NOTE: This command will create (or overwrite!) files in the"
        echo "current working directory!"
        echo ""
        echo "Limits can be imposed on time and space usage by setting MAX_SECS"
        echo "and MAX_KB, respectively."
    } 1>&2
    exit 1
}

[[ -n "$CMD"       ]] || usage
[[ -n "$GEN_INPUT" ]] || usage
[[ -n "$REPS"      ]] || usage

function checkStderr {
    if grep -f <(for E in "jq: error" "MLSpec: Failed" "syntax error" \
                          "Argument list too long" "out of memory"    \
                          "parse error:" "^error:"
                 do
                     echo "$E"
                 done) < "$1" 1>&2
    then
        echo "Errors found in '$1'" 1>&2
        return 2
    fi
    return 0
}

function run {
    # Generate input using the provided relevant
    "$GEN_INPUT" "$INFO" "$1" > stdin || {
        echo "Failed to generate input" 1>&2
        exit 1
    }

    # Run the given command, benchmarking with 'time' and enforcing
    # time/space limits with 'withTimeout'. We tee stderr so the user can see
    # it in real time. "command time" avoids bash's builtin "time".
    if [[ -n "$NIXENV" ]]
    then
        nix-shell -p "$NIXENV" \
                  --run "command time -o time -f '(time %e)' \
                           withTimeout '$CMD' < stdin 1> stdout \
                                                      2> >(tee stderr >&2)"
        CODE="$?"
    else
        command time -o time -f '(time %e)' \
          withTimeout "$CMD" < stdin 1> stdout 2> >(tee stderr >&2)
        CODE="$?"
    fi

    collectResult "$CODE"
}

function collectResult {
    storeResult
    checkForFailure "$1"
    reportResult
}

function storeResult {
    # Dump stdio into the Nix store, then format data/paths as JSON
     STDIN=$(nix-store --add stdin)
    STDOUT=$(nix-store --add stdout)
    STDERR=$(nix-store --add stderr)
}

function checkForFailure {
    FAILURE=null
    if [[ "$1" -ne 0 ]]
    then
        FAILURE="$1"
        echo "Failed to run '$CMD'" 1>&2
    elif ! checkStderr "$STDERR"
    then
        echo "Errors found in stderr of '$CMD'" 1>&2
        FAILURE="stderr"
    else
        echo "Finished running '$CMD'" 1>&2
    fi
}

function reportResult {
    T=$(grep -o '(time [0-9.]*)' < time | grep -o '[0-9.]*')
    jq -n --arg     stdin  "$STDIN"    \
          --arg     stdout "$STDOUT"   \
          --arg     stderr "$STDERR"   \
          --argjson time   "$T"        \
          --argjson failure "$FAILURE" \
          '{"failure" : $failure,
            "time"    : $time,
            "stdin"   : $stdin,
            "stdout"  : $stdout,
            "stderr"  : $stderr}'
}

function loop {
    for N in $(seq 1 "$REPS")
    do
        run "$N"
    done
}

loop | jq -s --arg cmd "$CMD" \
             --arg info "$INFO" \
          '{"cmd": $cmd, "info": $info, "results": .}'
